import BigNumber from "bignumber.js";
import { task, types } from "hardhat/config";
import fs from "fs";

/**
 * The expected gas usages for each of the migration, per entry. This is taken from an execution on testnet.
 */
const EXPECTED_GAS_USAGE = {
  migrateBalance: 29376,
  migrateSocialConnections: 8133,
  migrateEndorsements: 2930,
};

task("migrate-data", "Migrates data from an old UTT contract to a new version")
  .addParam("sourceaddress", "The address of the old UTT contract")
  .addParam("targetaddress", "The address to the new UTT contract")
  .addParam("fromFile", "input data file (as created by the export-logs task)")
  .addOptionalParam(
    "maxConnectedTypeId",
    "The max connected type id to migrate (can e.g. be used to omit migration of test connections).",
    Number.MAX_VALUE,
    types.int
  )
  .setAction(async function (taskArguments: any, { ethers, network }: any) {
    console.log(taskArguments);
    const data = JSON.parse(fs.readFileSync(taskArguments.fromFile, "utf8"));
    const accountsWithBalance = getAccountWithBalance(data);

    const UTT = await ethers.getContractAt("UTT", taskArguments.targetaddress);

    const transactionResponse = await UTT.migrateBalance(
      accountsWithBalance,
      taskArguments.sourceaddress
    );
    console.log(
      `Migrated balances. Transaction Hash: ${transactionResponse.hash}`
    );

    const addConnections = getAddConnections(
      data,
      taskArguments.maxConnectedTypeId
    );
    const addConnectionsTransactionResponse =
      await UTT.migrateSocialConnections(addConnections);
    console.log(
      `Migrated ${addConnections.length} social connections. Transaction Hash: ${addConnectionsTransactionResponse.hash}`
    );

    const endorsements = getEndorsements(data);
    const endorsementsTransactionResponse = await UTT.migrateEndorsements(
      endorsements,
      taskArguments.sourceaddress
    );
    console.log(
      `Migrated ${endorsements.length} endorsements. Transaction Hash: ${endorsementsTransactionResponse.hash}`
    );
  });

export const getAccountWithBalance = (data: object[]) => {
  const transferEvents = data.filter((e: any) => e.event === "Transfer");
  const accountsWithBalance = new Set();
  transferEvents.forEach((e: any) => {
    accountsWithBalance.add(e.args[0]);
    accountsWithBalance.add(e.args[1]);
  });
  const accounts = Array.from(accountsWithBalance).filter(
    (a) => a !== "0x0000000000000000000000000000000000000000"
  );
  return accounts;
};

export const getAddConnections = (
  data: object[],
  maxConnectedTypeId: number
) => {
  const events = data
    .filter((e: any) => e.event === "AddConnection")
    .reduce((agg: Array<object>, e: any) => {
      const connectedTypeId = new BigNumber(e.args[1].hex).toNumber();
      if (connectedTypeId <= maxConnectedTypeId) {
        agg.push({
          user: e.args[0],
          connectedTypeId,
          connectedUserIdHash: e.args[2],
        });
      } else {
        console.log(
          `Skipping connection with connectedTypeId ${connectedTypeId}`
        );
      }
      return agg;
    }, []);
  return events;
};

export const getEndorsements = (data: object[]) => {
  const events = data
    .filter((e: any) => e.event === "Endorse")
    .map((e: any) => {
      const amount = new BigNumber(e.args[2].hex).toNumber();
      return {
        from: e.args[0],
        target: e.args[1],
        amount: amount,
        transactionId: e.args[3],
      };
    });
  return events;
};
